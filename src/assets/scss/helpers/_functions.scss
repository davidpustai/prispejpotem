// STRIP UNIT
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// str-replace() - Replace in a string
//
// @param {string}  $string    String that you want to replace
// @param {string}  $substr    String that is to be replaced by `$newsubstr`
// @param {string}  $newsubstr String that replaces `$substr`
// @param {number*} $all       Flag for replaceing all (1+) or not (0)
// @return {string}
@function str-replace($string, $substr, $newsubstr, $all: 0) {
	$position-found: str-index($string, $substr);
	$processed: ();

	@while ($position-found and $position-found > 0) {
		$length-substr: str-length($substr);
		$processed: append($processed, str-slice($string, 0, $position-found - 1));
		$processed: append($processed, $newsubstr);
		$string: str-slice($string, $position-found + $length-substr);

		$position-found: 0;

		@if ($all > 0) {
			$position-found: str-index($string, $substr);
		}
	}

	$processed: append($processed, $string);
	$string: "";

	@each $s in $processed {
		$string: #{$string}#{$s};
	}

	@return $string;
}

// Use to declare `z-index` values. Select `$element` from `$list` and return it's depth (lower in list ~ higher z-index).
// For each context of `z-index` use new list. Lists live in `settings/_z-index.scss`. Default global context is `$z-all`.
// from https://www.smashingmagazine.com/2014/06/12/sassy-z-index-management-for-complex-layouts/
@function z($element, $list: $z-all) {
	$z-index: index($list, $element);

	@if $z-index {
		@return $z-index;
	}

	@warn "There is no item "#{$element}" in this list; choose one of: #{$list}";
	@return null;
}
